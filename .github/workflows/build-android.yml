name: Build Android Client

on:
  push:
    branches: [ master ]
    paths:
      - 'client/**'
      - 'common/**'
      - '.github/workflows/build-android.yml'
  pull_request:
  workflow_call:
    inputs:
      build_mode:
        description: 'Build mode (debug or release)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build-android:
    name: Build Android Client (${{ matrix.build_mode }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_mode: ${{ fromJSON(inputs.build_mode && format('["{0}"]', inputs.build_mode) || '["debug"]') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: client/yarn.lock

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          add-to-path: false

      - name: Set up Android SDK and build tools
        run: |
          # Install Android SDK components via sdkmanager
          echo "Installing Android SDK build tools and CMake..."
          
          # Accept licenses
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          
          # Install required SDK components
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "build-tools;34.0.0" \
            "cmake;3.22.1" \
            "platform-tools" \
            "platforms;android-34"
          
          echo "Android SDK components installed"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            aarch64-linux-android
            armv7-linux-androideabi
            i686-linux-android
            x86_64-linux-android

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            client/src-tauri
            common

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            libsqlite3-dev \
            cmake \
            ninja-build \
            build-essential \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install JavaScript dependencies
        working-directory: ./client
        run: yarn install --frozen-lockfile

      - name: Download and setup ASIO SDK
        working-directory: ./client/src-tauri
        run: |
          echo "Downloading ASIO SDK..."
          curl -L -o asiosdk.zip "https://download.steinberg.net/sdk_downloads/asiosdk_2.3.3_2019-06-14.zip"
          unzip -q asiosdk.zip
          ls -la
          echo "ASIO SDK downloaded and extracted"

      - name: Set up Android environment
        run: |
          # The setup-ndk action sets ANDROID_NDK_ROOT, but we need to ensure all common NDK env vars are set
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          
          # Set up Android SDK CMake
          CMAKE_VERSION="3.22.1"
          ANDROID_CMAKE_PATH="$ANDROID_HOME/cmake/$CMAKE_VERSION/bin"
          if [ -d "$ANDROID_CMAKE_PATH" ]; then
            echo "ANDROID_CMAKE_PATH=$ANDROID_CMAKE_PATH" >> $GITHUB_ENV
            echo "CMAKE=$ANDROID_CMAKE_PATH/cmake" >> $GITHUB_ENV
            echo "Adding Android CMake to PATH: $ANDROID_CMAKE_PATH"
            echo "$ANDROID_CMAKE_PATH" >> $GITHUB_PATH
          else
            echo "Android CMake not found at $ANDROID_CMAKE_PATH, using system CMake"
            echo "CMAKE=cmake" >> $GITHUB_ENV
          fi
          
          # Set up Ninja (prefer system ninja)
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
          
          # Debug: Show what NDK variables are available
          echo "Available NDK environment variables:"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          echo "NDK_HOME: $NDK_HOME"
          
          # Debug: Show build tools
          echo "Build tools verification:"
          cmake --version || echo "CMake not found"
          ninja --version || echo "Ninja not found"
          
          # Verify NDK installation
          if [ -d "$ANDROID_NDK_ROOT" ]; then
            echo "NDK found at: $ANDROID_NDK_ROOT"
            ls -la "$ANDROID_NDK_ROOT" | head -10
          else
            echo "ERROR: NDK not found at $ANDROID_NDK_ROOT"
            echo "Available directories in /usr/local/lib/android/sdk/:"
            ls -la /usr/local/lib/android/sdk/ || echo "Android SDK directory not found"
            
            # Try to find NDK in common locations
            echo "Searching for NDK installations..."
            find /usr/local/lib/android/sdk/ -name "ndk*" -type d 2>/dev/null || echo "No NDK directories found"
            
            # Set fallback NDK path if found
            NDK_PATH=$(find /usr/local/lib/android/sdk/ -name "ndk" -type d 2>/dev/null | head -1)
            if [ -n "$NDK_PATH" ]; then
              # Find the actual version directory
              NDK_VERSION_PATH=$(find "$NDK_PATH" -maxdepth 1 -type d -name "*.*.*" | head -1)
              if [ -n "$NDK_VERSION_PATH" ]; then
                echo "Found NDK at: $NDK_VERSION_PATH"
                echo "ANDROID_NDK_ROOT=$NDK_VERSION_PATH" >> $GITHUB_ENV
                echo "ANDROID_NDK_HOME=$NDK_VERSION_PATH" >> $GITHUB_ENV
                echo "NDK_HOME=$NDK_VERSION_PATH" >> $GITHUB_ENV
              fi
            fi
          fi

      - name: Initialize Tauri Android project
        working-directory: ./client
        run: |
          echo "Initializing Tauri Android project..."
          yarn tauri android init
          echo "Android project initialized successfully"

      - name: Make Android build script executable
        working-directory: ./client
        run: chmod +x android-build.sh

      - name: Build Android app
        working-directory: ./client
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: ./android-build.sh ${{ matrix.build_mode }}

      - name: Prepare Android artifacts
        working-directory: ./client
        run: |
          echo "=== Android Build Output Investigation ==="
          echo "Searching for all APK and AAB files..."
          find . -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files found"
          
          echo "=== Checking expected paths ==="
          echo "Looking in src-tauri/gen/android/app/build/outputs/"
          ls -la src-tauri/gen/android/app/build/outputs/ 2>/dev/null || echo "Directory not found"
          
          echo "=== Full directory structure ==="
          find src-tauri/gen/android/ -type f -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files in gen/android"
          
          mkdir -p artifacts
          
          # Try to find and copy any APK/AAB files
          APK_FOUND=false
          AAB_FOUND=false
          
          if [ "${{ matrix.build_mode }}" = "release" ]; then
            echo "=== Looking for release artifacts ==="
            # Search for release APK more broadly
            RELEASE_APK=$(find src-tauri/gen/android/ -name "*release*.apk" 2>/dev/null | head -n1)
            if [ -n "$RELEASE_APK" ] && [ -f "$RELEASE_APK" ]; then
              echo "Found release APK: $RELEASE_APK"
              cp "$RELEASE_APK" "artifacts/bvc-android-${{ matrix.build_mode }}.apk"
              APK_FOUND=true
            fi
            
            # Search for release AAB more broadly
            RELEASE_AAB=$(find src-tauri/gen/android/ -name "*release*.aab" 2>/dev/null | head -n1)
            if [ -n "$RELEASE_AAB" ] && [ -f "$RELEASE_AAB" ]; then
              echo "Found release AAB: $RELEASE_AAB"
              cp "$RELEASE_AAB" "artifacts/bvc-android-${{ matrix.build_mode }}.aab"
              AAB_FOUND=true
            fi
          else
            echo "=== Looking for debug artifacts ==="
            # Search for debug APK more broadly
            DEBUG_APK=$(find src-tauri/gen/android/ -name "*debug*.apk" 2>/dev/null | head -n1)
            if [ -n "$DEBUG_APK" ] && [ -f "$DEBUG_APK" ]; then
              echo "Found debug APK: $DEBUG_APK"
              cp "$DEBUG_APK" "artifacts/bvc-android-${{ matrix.build_mode }}.apk"
              APK_FOUND=true
            fi
            
            # Search for debug AAB more broadly
            DEBUG_AAB=$(find src-tauri/gen/android/ -name "*debug*.aab" 2>/dev/null | head -n1)
            if [ -n "$DEBUG_AAB" ] && [ -f "$DEBUG_AAB" ]; then
              echo "Found debug AAB: $DEBUG_AAB"
              cp "$DEBUG_AAB" "artifacts/bvc-android-${{ matrix.build_mode }}.aab"
              AAB_FOUND=true
            fi
          fi
          
          echo "=== Artifact Summary ==="
          echo "APK found: $APK_FOUND"
          echo "AAB found: $AAB_FOUND"
          
          # List final artifacts
          echo "=== Final artifacts ==="
          ls -la artifacts/ || echo "No artifacts directory found"
          
          # Count artifacts for upload validation
          ARTIFACT_COUNT=$(find artifacts/ -type f 2>/dev/null | wc -l)
          echo "Total artifacts: $ARTIFACT_COUNT"

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        id: upload-android
        with:
          name: android-client-${{ matrix.build_mode }}
          path: client/artifacts/
          retention-days: 30

      - name: Output artifact information
        run: |
          echo "🚀 Android Build Complete!"
          echo "📦 Artifacts uploaded as: android-client-${{ matrix.build_mode }}"
          echo "🔗 Artifact URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "⏰ Retention: 30 days"