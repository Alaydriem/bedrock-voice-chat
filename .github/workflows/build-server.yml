name: Build Server

on:
  push:
    branches: [ master ]
    paths:
      - 'server/**'
      - 'common/**'
      - 'migration/**'
      - 'entity/**'
      - '.github/workflows/build-server.yml'
  pull_request:
  workflow_call:
    inputs:
      build_mode:
        description: 'Build mode (debug or release)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build-server:
    name: Build Server (${{ matrix.target }} - ${{ matrix.build_mode }})
    runs-on: ${{ matrix.os }}
    if: ${{ !inputs.build_mode || inputs.build_mode == matrix.build_mode || inputs.build_mode == 'both' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: bedrock-voice-chat-server.exe
            build_mode: debug
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: bedrock-voice-chat-server.exe
            build_mode: release
            
          # Linux x64 builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: bedrock-voice-chat-server-amd64
            build_mode: debug
            
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: bedrock-voice-chat-server-amd64
            build_mode: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            server
            common

      - name: Install cross (for cross-compilation)
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Install Linux dependencies
        if: runner.os == 'Linux' && !matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            libsqlite3-dev \
            cmake \
            build-essential \
            libasound2-dev

      - name: Setup cross-compilation environment
        if: matrix.cross
        run: |
          # Install cross-compilation toolchain and dependencies
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            pkg-config \
            libssl-dev \
            libasound2-dev

      - name: Verify cross-compilation setup
        if: matrix.cross
        run: |
          echo "Cross-compilation environment:"
          echo "OPENSSL_STATIC=${OPENSSL_STATIC:-not set}"
          echo "OPENSSL_VENDORED=${OPENSSL_VENDORED:-not set}"
          echo "PKG_CONFIG_ALLOW_CROSS=${PKG_CONFIG_ALLOW_CROSS:-not set}"
          echo "Available Cross.toml:"
          ls -la Cross.toml || echo "No Cross.toml found"
          echo "Available .cargo/config.toml:"
          ls -la .cargo/config.toml || echo "No .cargo/config.toml found"
          echo "Cross version:"
          cross --version
          echo "Testing aarch64 toolchain:"
          aarch64-linux-gnu-gcc --version || echo "aarch64-linux-gnu-gcc not found"

      - name: Build server (cross-compilation)
        if: matrix.cross
        working-directory: ./server
        env:
          # Force vendored OpenSSL to avoid cross-compilation issues
          OPENSSL_STATIC: "1"
          OPENSSL_VENDORED: "1"
          PKG_CONFIG_ALLOW_CROSS: "0"
          # Additional environment variables for cross compilation
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"
        run: |
          if [ "${{ matrix.build_mode }}" = "release" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cross build --target ${{ matrix.target }}
          fi

      - name: Build server (native)
        if: '!matrix.cross'
        working-directory: ./server
        run: |
          if [ "${{ matrix.build_mode }}" = "release" ]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Prepare artifacts
        shell: bash
        run: |
          if [ "${{ matrix.build_mode }}" = "release" ]; then
            BUILD_DIR="target/${{ matrix.target }}/release"
          else
            BUILD_DIR="target/${{ matrix.target }}/debug"
          fi
          
          mkdir -p artifacts
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp "server/${BUILD_DIR}/bedrock-voice-chat-server.exe" "artifacts/bvc-server-${{ matrix.target }}-${{ matrix.build_mode }}.exe"
          else
            cp "server/${BUILD_DIR}/bedrock-voice-chat-server" "artifacts/bvc-server-${{ matrix.target }}-${{ matrix.build_mode }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        id: upload-server
        with:
          name: server-${{ matrix.target }}-${{ matrix.build_mode }}
          path: artifacts/
          retention-days: 30

      - name: Output artifact information
        shell: bash
        run: |
          echo "üöÄ Server Build Complete!"
          echo "üéØ Target: ${{ matrix.target }}"
          echo "üîß Mode: ${{ matrix.build_mode }}"
          echo "üì¶ Artifacts uploaded as: server-${{ matrix.target }}-${{ matrix.build_mode }}"
          echo "üîó Artifact URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "‚è∞ Retention: 30 days"